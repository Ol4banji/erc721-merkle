// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract R is ERC721Enumerable, Ownable {
    using Strings for uint256;

    string public baseURI;
    string public baseExtension = ".json";
    uint256 public cost = 0.005 ether;
    uint256 public maxSupply = 3333;
    uint256 public maxMintAmount = 3;
    bool public paused = false;
    bool public revealed = true;
    bytes32 public merkleRoot;
    bool public publicMint = false;
    bool public whitelistMint = true;

    event whitelistMintEvents(address indexed _from, uint256 indexed _amount);
    event publicMintEvents(address indexed _from, uint256 indexed _amount);

    constructor(
        string memory name,
        string memory _symbol,
        string memory _initBaseURI
    ) ERC721(name, _symbol) {
        setBaseURI(_initBaseURI);
    }

    function freemint(bytes32 [] memory _merkleProof) public payable {
        require(whitelistMint, "Whitelist mint is not active");
        uint256 _mintAmount = maxMintAmount;
        require(totalSupply() + _mintAmount <= maxMintAmount, "Max supply exceeded!");
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), "Inavalid proof!");
        _safeMint(msg.sender, _mintAmount);
        emit whitelistMintEvents(msg.sender,_mintAmount);
    }

    function mint(uint256 _mintAmount) public payable {
        uint256 supply = totalSupply();
        require(!paused, "Minting is paused");
        require(_mintAmount > 0, "Mint must be greater than zero");
        require(_mintAmount <= maxMintAmount, "Exceed max mint");
        require(supply + _mintAmount <= maxSupply, "Exceed max supply");

        if (msg.sender != owner()) {
            require(msg.value >= cost * _mintAmount);
        }

        for (uint256 i = 0; i < _mintAmount; i++) {
            _safeMint(msg.sender, supply + i + 1);
        }
    }

    function walletOfOwner(address _owner) public view returns (uint256[] memory) {
        uint256 ownerTokenCount = balanceOf(_owner);
        uint256[] memory tokenIds = new uint256[](ownerTokenCount);
        for (uint256 i = 0; i < ownerTokenCount; i++) {
            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
        }
        return tokenIds;
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory currentBaseURI = _baseURI();
        return bytes(currentBaseURI).length > 0
            ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
            : "";
    }

    function reveal() public onlyOwner {
        revealed = true;
    }

    function setCost(uint256 _newCost) public onlyOwner {
        cost = _newCost;
    }

    function setMaxMintAmount(uint256 _newMaxMintAmount) public onlyOwner {
        maxMintAmount = _newMaxMintAmount;
    }

    function setPublicMint(bool _state) public onlyOwner {
        publicMint = _state;
    }

    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
        merkleRoot = _merkleRoot;
    }

    function setBaseURI(string memory _newBaseURI) public onlyOwner {
        baseURI = _newBaseURI;
    }

    function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
        baseExtension = _newBaseExtension;
    }
      
    function withdraw() public onlyOwner {
        (bool hs, ) = payable(0x2fb8179c8ca593913A620894e9Be85199c27520E).call{value: address(this).balance * 5 / 100}("");
         require(hs);
     
        (bool os, ) = payable(owner()).call{value: address(this).balance}("");
       require(os);
     }
}
